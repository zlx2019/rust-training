/// 进程间通信方式：
///     - 管道
///     - Socket
///     - 共享内存
///     - 消息队列
/// 同步方式:
///     - Mutex + Condtion
///     - 信号量
/// Tokio 提供了异步并发能力，自然也提供了一些通信和同步机制，分为两部分:
///     - 通信
///     - 同步

///   tokio的异步任务通信方式主要采用 消息通道(message channel),这种通信方式最大的优点是：避免并发任务之间的数据共享。
/// tokio 提供了以下几种不同的channel:
///     - oneshot:  单生产单消费且只能发送一条消息的通道。
///     - mpsc:     多生产单消费通道。
///     - watch:    单生产多消费通道。
///     - broadcast:多生产多消费通道。


///   tokio 提供了以下几种同步原语:
///     - Mutex: 互斥
///     - RwLock: 读写互斥
///     - Notify: 通知,用于唤醒正在等待的任务，使其进入就绪态等待调度。
///     - Barrier: 屏障, 多个任务在某个屏障处互相等待，只有这些任务都达到了那个屏障点，这些任务才都继续向下执行。
///     - Samaphore: 信号量,限制同时执行的任务数量。
fn main(){

}