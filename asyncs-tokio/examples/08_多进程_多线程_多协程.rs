/// ### 理解多进程、多线程、多协程各自之间的优势与能力?
/// 
/// 多进程的效率一定不如多线程吗？多线程的效率一定不如多协程吗？其实主要取决于你执行的任务是IO密集型还是CPU计算密集型。
/// 
///   如果有很多IO任务要执行，为了让这些IO操作不阻塞程序，可以使用多进程的方式将这些IO操作丢到【后台】去等待，然后通过各种进程间通信的方式来传递数据。
/// 但是进程间的上下文切换会带来较大的开销。因此，当程序使用多进程方式，且工作进程数量较多时，因为不断地进行进程间切换和内存拷贝，效率会明显下降。
/// 
///   比多进程更好一些的是多线程方式，线程是进程内部的执行单元，线程间的上下文切换的开销要远小于进程间切换的开销。因此，大概可以认为，多线程要优于多进程，
/// 如果单个进程内的线程数量较多，可以考虑引入多进程，然后在某些进程内使用多线程。
/// 
///   比多线程更好一些的是多协程方式，协程是线程内部的执行单元，协程的上下文切换开销，又要远小于线程间切换的开销。因此，大概可以认为，多协程要优于多线程，
/// 如果单个线程内的协程数量较多，可以考虑引入多线程，然后在某些线程内使用多协程。
/// 
///   但是，多进程效率并不真的差，多线程的效率也并不真的比多协程效率差。高并发能力的高低，完全取决于程序是否出现了等待、
/// 是否浪费了可调度单元(即进程、线程、协程)、是否浪费了更多的CPU。
/// 
///   一个简单的例子，假如要发送10W个HTTP请求，用多协程是最好的。为什么呢？因为HTTP请求是一个非常简单的IO任务，它只需要发送请求，然后等待。
/// 如果用多线程的并发模式，每个线程负责发送一个HTTP请求，那么每一个线程都将长时间处于等待状态，什么也不做，这是对线程的浪费，加之线程数量太多，
/// 在这么多的线程之间进行切换也会浪费大量CPU。因此，在这种情况下，多协程优于多线程。
/// 
///   另一方面，如果是要计算10W个密钥，应当去使用一定数量的多进程或多线程(少于或等于CPU核数)，以保证能尽量多地利用多核CPU。用多协程可能会很不好，
/// 因为协程调度会打断计算进度，当然这取决于协程调度器的调度逻辑。
/// 
///   从这两个简单又极端的示例可以大概理解，如果要执行的任务越简单(这里的简单表示的是计算密集程度低)，越IO密集，越应该使用粒度更小的可调度单元(即协程)。
/// 计算任务越重，越应该利用多核CPU。


/// ### 选择单线程还是多线程模式?
/// 
/// 

fn main(){

}