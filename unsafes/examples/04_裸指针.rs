///   在Rust中，指针称之为裸指针或原生指针(raw pointer)，在功能上跟引用类似，同时它也需要显示地注明可变性。
/// 但是又和引用有所不同，裸指针有 `*const T` 和 `*mut T` 分别表示不可变和可变裸指针。 这里的`*`只是类型的一部分，并没有解引用的含义。
/// 
///  至此我们已经学习了Rust三种类似指针的概念: 引用、智能指针和裸指针。与前两者不同，裸指针有如下特性:
///     - 可以绕过Rust的借用规则，可以同时拥有一个值的可变与不可变指针，甚至还能拥有多个可变指针。
///     - 无法保证指向的内存地址一定是有效的
///     - 可以是 `null`
///     - 没有实现任何自动回收
/// 所以，Rust的裸指针跟C语言的原生指针非常像，使用它需要牺牲安全性，但是可以获得更好的性能。

fn main(){
    let mut num: i32 = 5;
    // 1. 基于引用创建裸指针
    // 可以通过 as 强制将引用转换为裸指针
    let _ptr1 = &num as *const i32;
    let _ptr2 = &mut num as *mut i32;
    // 注意: 创建裸指针是安全的行为，所以不需要被 unsafe 包裹，但是解引用时则需要 unsafe
    unsafe {
        *_ptr2 = 20;
        println!("num: {}", num);
        println!("ptr2 val: {}", * _ptr2);
    }

    // 2. 基于内存地址创建裸指针
}